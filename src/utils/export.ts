import type { RecurrenceState, ExportFormat } from "@/types/recurring-date"
import { calculateRecurringDates, formatDate } from "./date-utils"

export function exportRecurringDates(state: RecurrenceState, format: ExportFormat["format"]): void {
  const dates = calculateRecurringDates(state, 1000)

  switch (format) {
    case "json":
      exportAsJSON(dates, state)
      break
    case "csv":
      exportAsCSV(dates, state)
      break
    case "ical":
      exportAsICal(dates, state)
      break
  }
}

function exportAsJSON(dates: Date[], state: RecurrenceState): void {
  const data = {
    recurrencePattern: {
      type: state.type,
      interval: state.interval,
      startDate: state.startDate?.toISOString(),
      endDate: state.endDate?.toISOString(),
      includeTime: state.includeTime,
      selectedTime: state.selectedTime,
      maxOccurrences: state.maxOccurrences,
    },
    dates: dates.map((date) => ({
      date: date.toISOString(),
      formatted: formatDate(date, state.includeTime),
    })),
    totalCount: dates.length,
    exportedAt: new Date().toISOString(),
  }

  const blob = new Blob([JSON.stringify(data, null, 2)], { type: "application/json" })
  downloadFile(blob, "recurring-dates.json")
}

function exportAsCSV(dates: Date[], state: RecurrenceState): void {
  const headers = ["Date", "Formatted Date", "Day of Week"]
  if (state.includeTime) {
    headers.push("Time")
  }

  const rows = dates.map((date) => {
    const row = [
      date.toISOString().split("T")[0],
      formatDate(date, false),
      date.toLocaleDateString("en-US", { weekday: "long" }),
    ]

    if (state.includeTime) {
      row.push(date.toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit" }))
    }

    return row
  })

  const csvContent = [headers, ...rows].map((row) => row.map((cell) => `"${cell}"`).join(",")).join("\n")

  const blob = new Blob([csvContent], { type: "text/csv" })
  downloadFile(blob, "recurring-dates.csv")
}

function exportAsICal(dates: Date[]): void {
  const now = new Date()
  const formatICalDate = (date: Date) => {
    return date.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z"
  }

  const icalContent = ["BEGIN:VCALENDAR", "VERSION:2.0", "PRODID:-//Recurring Date Picker//EN", "CALSCALE:GREGORIAN"]

  dates.forEach((date, index) => {
    icalContent.push(
      "BEGIN:VEVENT",
      `UID:recurring-${index}-${now.getTime()}@recurringdatepicker.com`,
      `DTSTAMP:${formatICalDate(now)}`,
      `DTSTART:${formatICalDate(date)}`,
      `SUMMARY:Recurring Event`,
      `DESCRIPTION:Generated by Recurring Date Picker`,
      "END:VEVENT",
    )
  })

  icalContent.push("END:VCALENDAR")

  const blob = new Blob([icalContent.join("\r\n")], { type: "text/calendar" })
  downloadFile(blob, "recurring-dates.ics")
}

function downloadFile(blob: Blob, filename: string): void {
  const url = URL.createObjectURL(blob)
  const link = document.createElement("a")
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  URL.revokeObjectURL(url)
}
